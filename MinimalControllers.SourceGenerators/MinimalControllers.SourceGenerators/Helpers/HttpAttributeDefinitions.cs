using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace MinimalControllers.SourceGenerators.Helpers;

public static class HttpAttributeDefinitions
{
    public const string Namespace = "MinimalControllers";

    public static readonly string[] HttpMethods = [
        "HttpGet", 
        "HttpPost", 
        "HttpPut", 
        "HttpPatch", 
        "HttpDelete"];
    
    public static readonly string[] ControllerTypes = [
        "Controller", 
        "ApiController"
    ];


    public static readonly string[] HttpMethodsWithNamespace = HttpMethods.Select(x => $"{Namespace}.{x}").ToArray();
    public static readonly string[] ControllerTypesWithNamespace = ControllerTypes.Select(x => $"{Namespace}.{x}").ToArray();

    private static Dictionary<string, string> GetAttributes(
        IEnumerable<string> attributeNames, 
        params System.AttributeTargets[] attributeTargets) =>
        attributeNames
            .ToDictionary(
                name => name,
                name => $$"""
                                // <auto-generated/>

                                namespace {{Namespace}}
                                {
                                    [System.AttributeUsage({{
                                        string.Join(" | ", attributeTargets.Select(x => $"System.AttributeTargets.{x}"))
                                    }}, Inherited = false, AllowMultiple = false)]
                                    public sealed class {{name}}Attribute : System.Attribute
                                    {
                                    }
                                }
                                """);
    
    private static void AddAttributesFromNames(
        IEnumerable<string> attributeNames, 
        IncrementalGeneratorInitializationContext context, 
        params System.AttributeTargets[] attributeTargets)
    {
        foreach (var item in GetAttributes(attributeNames, attributeTargets))
        {
            context.RegisterPostInitializationOutput(ctx => ctx.AddSource(
                $"{item.Key}.g.cs",
                SourceText.From(item.Value, Encoding.UTF8)));
        }
    }
    
    public static void AddHttpAttributesToCompilation(IncrementalGeneratorInitializationContext context)
        => AddAttributesFromNames(HttpMethods, context, System.AttributeTargets.Method);

    public static void AddApiControllerAttributesToCompilation(IncrementalGeneratorInitializationContext context)
        => AddAttributesFromNames(ControllerTypes, context, System.AttributeTargets.Class);
}