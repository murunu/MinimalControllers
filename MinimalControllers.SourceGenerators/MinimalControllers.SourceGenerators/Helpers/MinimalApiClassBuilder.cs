using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;

namespace MinimalControllers.SourceGenerators.Helpers;

public class MinimalApiClassBuilder
{
    private const string ClassName = "MinimalController";
    private string _currentController = "";
    
    private readonly StringBuilder _builder = new($$"""
                                                    // <auto-generated/>
                                                    
                                                    namespace {{HttpAttributeDefinitions.Namespace}} {
                                                    
                                                        public static class {{ClassName}} {
                                                            public static WebApplication UseControllers(this WebApplication app) {
                                                            
                                                    """);

    public MinimalApiClassBuilder AddGroup(string name)
    {
        _currentController = name;
        
        _builder.AppendLine($"\tvar group = app.MapGroup(\"/{name}\");");
        return this;
    }

    public MinimalApiClassBuilder AddEndpoint(
        string httpMethod, 
        string endpoint, 
        string methodName,
        IEnumerable<string> controllerServices)
    {
        
        if(string.IsNullOrEmpty(_currentController))
            throw new InvalidOperationException("You must call AddGroup before adding an endpoint.");

        var services = controllerServices.ToDictionary(
            x => x,
            x =>
            {
                var startIndex = x.IndexOf('<');

                if (startIndex != -1)
                {
                    var count = x.Length - startIndex;

                    x = x.Remove(startIndex, count);    
                }                
                
                x = x.Split('.').Last();
                
                var txtInfo = new CultureInfo("en-us", false).TextInfo;

                return txtInfo.ToTitleCase(x);
            });
        
        _builder.Append($$"""
                                         
                                         
                                      group.Map{{httpMethod}}("{{endpoint}}", ({{
                                          string.Join(", ", services.Select(x => $"{x.Key} {x.Value}"))
                                      }}) => {
                                          var controller = new {{
                                              _currentController
                                          }}({{
                                              string.Join(", ", services.Values)
                                          }});
                                        
                                          return controller.{{methodName}}();
                                      });
                          """);
        return this;
    }
    
    public string Build() =>
        _builder.AppendLine("\n\t\t\treturn app;\n\t\t}\n\t}\n}").ToString();
    
}